use Merh_Univer

-----1
---все индексы, которые имеются в БД UNIVER. Определить, какие из них являются кластеризованными, а ка-кие некластеризованными. 
use Merh_Univer
exec SP_HELPINDEX 'AUDITORIUM_TYPE'
exec SP_HELPINDEX AUDITORIUM
exec SP_HELPINDEX FACULTY
exec SP_HELPINDEX GROUPS
exec SP_HELPINDEX PROFESSION
exec SP_HELPINDEX PROGRESS
exec SP_HELPINDEX PULPIT
exec SP_HELPINDEX STUDENT
exec SP_HELPINDEX SUBJECT
exec SP_HELPINDEX TEACHER


DROP TABLE #EXPLRE
CREATE table  #EXPLRE
 (    TIND int,  
      TFIELD varchar(100),
	  TIND1 INT
  );

BEGIN
 SET nocount on
 DECLARE	@i int=0,
			@tmp int=0;

  while @i<2500
  begin
  set @tmp=floor(RAND()*1100)
  insert #EXPLRE(TIND, TFIELD, TIND1)
		values(@tmp, 'string'+ CAST(@tmp AS VARCHAR(100)), @tmp+100)

IF (@i % 100 = 0) PRINT @i
SET @i=@i+1;
  end

END
--0.0146...
SELECT *FROM #EXPLRE WHERE TIND BETWEEN 200 AND 1500 
					ORDER BY TIND
--Создать кластеризованный индекс, уменьшающий стоимость SELECT-запроса.
CHECKPOINT
DBCC DROPCLEANBUFFERS

CREATE CLUSTERED INDEX #EXPLRE_CL ON #EXPLRE(TIND1 ASC)

SELECT *FROM #EXPLRE WHERE TIND BETWEEN 200 AND 1500 
					ORDER BY TIND

DROP INDEX #EXPLRE_CL ON #EXPLRE
-----2
DROP TABLE #EX


CREATE table  #EX
 (    TIND int,  
      TFIELD varchar(100),
	  TIND1 INT IDENTITY(1,1)
  )


BEGIN 
DECLARE @i INT, @tmp INT;
SET nocount on
SET	@i=0;
SET @tmp=0;
  while @i<15000
  begin
  set @tmp=floor(RAND()*1100)
  insert #EX(TIND, TFIELD)
		values(@tmp, 'string'+ CAST(@tmp AS VARCHAR(100)))

IF (@i % 100 = 0) PRINT @i
SET @i=@i+1;
  end
END

SELECT COUNT(*) FROM #EX
SELECT *FROM #EX WHERE TIND BETWEEN 200 AND 201

CREATE INDEX #EX_NCL ON #EX(TFIELD, TIND1)

SELECT COUNT(*) FROM #EX
SELECT *FROM #EX WHERE TIND BETWEEN 200 AND 201

DROP INDEX #EX_NCL ON #EX

-----3
DROP TABLE #TASK_3
CREATE TABLE #TASK_3
(
	TIND int,  
	TFIELD varchar(100),
	TIND1 INT IDENTITY(1,1)
)



DECLARE @i INT, @tmp INT;
SET nocount on
SET	@i=0;
SET @tmp=0;
  while @i<15000
  begin
	insert #TASK_3(TIND, TFIELD)
		values(floor(RAND()*1100), 'TASK_3 ')

IF (@i % 1000 = 0) PRINT @i
	SET @i=@i+1;
  end


SELECT COUNT(*) FROM #TASK_3
SELECT *FROM #TASK_3

CREATE INDEX #TASK_3_INDEX ON #TASK_3(TIND) INCLUDE (TIND1)

DROP INDEX #TASK_3_INDEX ON #TASK_3

-----4

CREATE TABLE #TASK_4(
	F1 INT,
	F2 INT IDENTITY(1,1),
	F3 VARCHAR(100)
)

SET NOCOUNT ON
DECLARE @I INT = 0
WHILE @I < 20000
	BEGIN
		INSERT #TASK_4 ( F1, F3 )
			VALUES ( FLOOR( 20000 * RAND( ) ), 'TASK 4' )
		IF (@I % 1000 = 0) PRINT @I
		SET @I = @I + 1;
	END

SELECT COUNT(*) FROM #TASK_4
SELECT F1 FROM #TASK_4 WHERE F1 BETWEEN 5000 AND 6000
SELECT F1 FROM #TASK_4 WHERE F1 = 34545;

CREATE INDEX #TASK_4_WHERE ON #TASK_4(F1) WHERE (F1> 5000 AND F1<6000)
CREATE INDEX #TASK_4_WHERE1 ON #TASK_4(F1) WHERE (F1=34545)

DROP INDEX #TASK_4_WHERE ON #TASK_4
DROP INDEX #TASK_4_WHERE1 ON #TASK_4

-----5
DROP TABLE TASK_5
CREATE TABLE TASK_5(
	F1 INT,
	F2 INT IDENTITY,
	F3 VARCHAR(100)
);

SET NOCOUNT ON;
DECLARE @I INT = 0;
WHILE @I < 20000
	BEGIN
		INSERT TASK_5 ( F1, F3 )
			VALUES ( FLOOR( 20000 * RAND( ) ), 'TASK_5' );
		SET @I = @I + 1; 
	END
GO

CREATE INDEX #TASK_5_INDEX ON TASK_5( F1 );

SELECT NAME, AVG_FRAGMENTATION_IN_PERCENT
	FROM SYS.dm_db_index_physical_stats( DB_ID(N'Merh_Univer'),
				OBJECT_ID(N'TASK_5'), NULL, NULL, NULL ) AS SS
	JOIN SYS.indexes AS II
		ON SS.object_id =  II.object_id 
			 AND SS.index_id = II.index_id
	WHERE NAME IS NOT NULL;

INSERT TOP(20000) TASK_5( F1, F3 ) SELECT F1, F3 FROM TASK_5
INSERT TOP(1000) TASK_5( F1, F3 ) SELECT F1, F3 FROM TASK_5

ALTER INDEX #TASK_5_INDEX ON TASK_5 REORGANIZE
SELECT NAME, AVG_FRAGMENTATION_IN_PERCENT
	FROM SYS.dm_db_index_physical_stats( DB_ID(N'Merh_Univer'),
				OBJECT_ID(N'TASK_5'), NULL, NULL, NULL ) AS SS
	JOIN SYS.indexes AS II
		ON SS.object_id =  II.object_id 
			 AND SS.index_id = II.index_id
	WHERE NAME IS NOT NULL;

ALTER INDEX #TASK_5_INDEX ON TASk_5 REBUILD WITH ( ONLINE = OFF )
SELECT NAME, AVG_FRAGMENTATION_IN_PERCENT
	FROM SYS.dm_db_index_physical_stats( DB_ID(N'Merh_Univer'),
				OBJECT_ID(N'TASK_5'), NULL, NULL, NULL ) AS SS
	JOIN SYS.indexes AS II
		ON SS.object_id =  II.object_id 
			 AND SS.index_id = II.index_id
	WHERE NAME IS NOT NULL;


-----6
CREATE INDEX #TASK_6_INDEX ON TASK_5( F1 )
	WITH FILLFACTOR = 65

select count(*) from TASK_5
CREATE INDEX #TASK_7_INDEX ON TASK_5( F1 )


INSERT TOP(50) PERCENT INTO TASK_5( F1, F3 )
	SELECT F1, F3 FROM TASK_5;

	SELECT NAME, AVG_FRAGMENTATION_IN_PERCENT
	FROM SYS.dm_db_index_physical_stats( DB_ID(N'Merh_Univer'),
				OBJECT_ID(N'TASK_5'), NULL, NULL, NULL ) AS SS
	JOIN SYS.indexes AS II
		ON SS.object_id =  II.object_id 
			 AND SS.index_id = II.index_id
	WHERE NAME IS NOT NULL;

DROP INDEX #TASK_5_INDEX ON TASK_5
DROP INDEX #TASK_6_INDEX ON TASK_5
DROP INDEX #TASK_7_INDEX ON TASK_5
DROP TABLE TASK_5
