use Merh_Univer
----1
drop TABLE TR_AUDIT
CREATE TABLE TR_AUDIT(
	ID INT IDENTITY,
	STMT VARCHAR(20)
		CHECK( STMT IN ( 'INS', 'DEL', 'UPD' )),
	TRNAME VARCHAR(50),
	CC VARCHAR(300) 
);

SELECT * FROM TEACHER
DROP TRIGGER TR_TEACHER_INS

CREATE TRIGGER TR_TEACHER_INS
	ON TEACHER AFTER INSERT
	AS DECLARE @A1 NVARCHAR(10), @A2 NVARCHAR(100), @A3 CHAR(1), @A4 CHAR(20),
		 @IN VARCHAR(300);
	PRINT 'INSERT';
	SET @A1 = ( SELECT TEACHER FROM inserted );
	SET @A2 = ( SELECT TEACHER_NAME FROM inserted );
	SET @A3 = ( SELECT GENDER FROM inserted );
	SET @A4 = ( SELECT PULPIT FROM inserted );
	SET @IN = @A1 + ' ' + @A2 + ' ' + @A3 + ' ' + @A4;

	INSERT INTO TR_AUDIT( STMT, TRNAME, CC )
		VALUES ( 'INS', 'TR_TEACHER_INS', @IN );

	RETURN;
	
INSERT INTO TEACHER VALUES( 'F7D', 'FFF', '์', 'ศั่า' );

SELECT * FROM TR_AUDIT


--  TASK 2
DROP TRIGGER TR_TEACHER_DEL;
CREATE TRIGGER TR_TEACHER_DEL
	ON TEACHER AFTER DELETE
	AS DECLARE @A1 NVARCHAR(10), @A2 NVARCHAR(100), @A3 CHAR(1), @A4 CHAR(20),
		 @IN VARCHAR(300);
	PRINT 'DELETE';
	SET @A1 = ( SELECT TEACHER FROM deleted );
	SET @A2 = ( SELECT TEACHER_NAME FROM deleted );
	SET @A3 = ( SELECT GENDER FROM deleted );
	SET @A4 = ( SELECT PULPIT FROM deleted );
	SET @IN = @A1 + ' ' + @A2 + ' ' + @A3 + ' ' + @A4;

	INSERT INTO TR_AUDIT( STMT, TRNAME, CC )
		VALUES ( 'DEL', 'TR_TEACHER_DEL', @IN );

	RETURN;
	
DELETE TEACHER WHERE TEACHER.TEACHER = 'F7D';

SELECT * FROM TR_AUDIT


-- TASK 3
DROP TRIGGER TR_TEACHER_UPD

CREATE TRIGGER TR_TEACHER_UPD
	ON TEACHER AFTER UPDATE
	AS DECLARE @A1 NVARCHAR(10), @A2 NVARCHAR(100), @A3 CHAR(1), @A4 CHAR(20),
		 @IN VARCHAR(300);
	PRINT 'UPDATE';
	SET @A1 = ( SELECT TEACHER FROM deleted );
	SET @A2 = ( SELECT TEACHER_NAME FROM deleted );
	SET @A3 = ( SELECT GENDER FROM deleted );
	SET @A4 = ( SELECT PULPIT FROM deleted );
	SET @IN = @A1 + ' ' + @A2 + ' ' + @A3 + ' ' + @A4;

	INSERT INTO TR_AUDIT( STMT, TRNAME, CC )
		VALUES ( 'UPD', 'TR_TEACHER_UPD', @IN );

	RETURN;
	
SELECT * FROM TEACHER

UPDATE TEACHER SET TEACHER_NAME = 'QQQQ' WHERE TEACHER.TEACHER = 'FD';

SELECT * FROM TR_AUDIT


--  TASK 4
DROP TRIGGER TR_TEACHER

CREATE TRIGGER TR_TEACHER
	ON TEACHER AFTER INSERT, DELETE, UPDATE
	AS DECLARE @A1 NVARCHAR(10), @A2 NVARCHAR(100), @A3 CHAR(1), @A4 CHAR(20),
		 @IN VARCHAR(300);
	DECLARE @C_INS INT = ( SELECT COUNT(*) FROM inserted );
	DECLARE @C_DEL INT = ( SELECT COUNT(*) FROM deleted );
	IF @C_INS > 0 AND @C_DEL = 0
		BEGIN
			PRINT 'INSERT';
			SET @A1 = ( SELECT TEACHER FROM inserted );
			SET @A2 = ( SELECT TEACHER_NAME FROM inserted );
			SET @A3 = ( SELECT GENDER FROM inserted );
			SET @A4 = ( SELECT PULPIT FROM inserted );
			SET @IN = @A1 + ' ' + @A2 + ' ' + @A3 + ' ' + @A4;
			INSERT INTO TR_AUDIT( STMT, TRNAME, CC )
				VALUES ( 'INS', 'TR_TEACHER', @IN );
		END
	ELSE IF @C_INS = 0 AND @C_DEL > 0
		BEGIN
			PRINT 'DELETE';
			SET @A1 = ( SELECT TEACHER FROM deleted );
			SET @A2 = ( SELECT TEACHER_NAME FROM deleted );
			SET @A3 = ( SELECT GENDER FROM deleted );
			SET @A4 = ( SELECT PULPIT FROM deleted );
			SET @IN = @A1 + ' ' + @A2 + ' ' + @A3 + ' ' + @A4;
			INSERT INTO TR_AUDIT( STMT, TRNAME, CC )
				VALUES ( 'DEL', 'TR_TEACHER', @IN );
		END
	ELSE IF @C_INS > 0 AND @C_DEL > 0
		BEGIN
			PRINT 'UPDATE';
			SET @A1 = ( SELECT TEACHER FROM deleted );
			SET @A2 = ( SELECT TEACHER_NAME FROM deleted );
			SET @A3 = ( SELECT GENDER FROM deleted );
			SET @A4 = ( SELECT PULPIT FROM deleted );
			SET @IN = @A1 + ' ' + @A2 + ' ' + @A3 + ' ' + @A4;
			INSERT INTO TR_AUDIT( STMT, TRNAME, CC )
				VALUES ( 'UPD', 'TR_TEACHER', @IN );
		END
RETURN;
	
UPDATE TEACHER SET TEACHER_NAME = 'QQQQ' WHERE TEACHER.TEACHER = 'ภสอยื';
DELETE TEACHER WHERE TEACHER.TEACHER = 'FD';
INSERT INTO TEACHER VALUES( 'FD', 'FFF', '์', 'ศั่า' );

SELECT * FROM TR_AUDIT

SELECT * FROM TEACHER
--  TASK 5
ALTER TABLE TEACHER ADD CONSTRAINT TEACHER_NAME CHECK( TEACHER_NAME != NULL );
GO
UPDATE TEACHER SET TEACHER.TEACHER_NAME = NULL WHERE TEACHER.TEACHER_NAME = 'FFF'; 

GO
--  TASK 6
DROP TRIGGER TR_TEACHER_DEL_1;

DROP TRIGGER TR_TEACHER_DEL_2

DROP TRIGGER TR_TEACHER_DEL_3

DISABLE TRIGGER TR_TEACHER_DEL_1 ON TEACHER
ENABLE TRIGGER TR_TEACHER_DEL_1 ON TEACHER

CREATE TRIGGER TR_TEACHER_DEL_1
	ON TEACHER AFTER DELETE
	AS PRINT 'TR_TEACHER_DEL_1';
	RETURN;
GO
CREATE TRIGGER TR_TEACHER_DEL_2
	ON TEACHER AFTER DELETE
	AS PRINT 'TR_TEACHER_DEL_2';
	RETURN;
GO
CREATE TRIGGER TR_TEACHER_DEL_3
	ON TEACHER AFTER DELETE
	AS PRINT 'TR_TEACHER_DEL_3';
	RETURN;
GO

SELECT T.NAME, E.TYPE_DESC
	FROM sys.triggers T
		JOIN sys.trigger_events E
			ON T.object_id = E.object_id
	WHERE OBJECT_NAME(T.parent_id) = 'TEACHER' AND
		E.type_desc = 'DELETE';

EXEC sp_settriggerorder @TRIGGERNAME = 'TR_TEACHER_DEL_3',
	@ORDER = 'FIRST', @STMTTYPE = 'DELETE';
	 
EXEC sp_settriggerorder @TRIGGERNAME = 'TR_TEACHER_DEL_2',
	@ORDER = 'LAST', @STMTTYPE = 'DELETE';

INSERT TEACHER(TEACHER, TEACHER_NAME, GENDER, PULPIT)
VALUES ('TST', 'TST', 'ๆ', 'ศั่า');
DELETE TEACHER WHERE TEACHER = 'TST';
	
--  TASK 7
DROP TRIGGER TASK_7

CREATE TRIGGER TASK_7
	ON AUDITORIUM AFTER INSERT, DELETE, UPDATE
	AS DECLARE @SUMM INT = 
		(SELECT SUM(AUDITORIUM.AUDITORIUM_CAPACITY) FROM AUDITORIUM);
	IF (@SUMM > 500 )
		BEGIN
			RAISERROR('ERROR',10,1);
			ROLLBACK;
		END
RETURN;
SELECT * FROM AUDITORIUM
SELECT SUM(AUDITORIUM.AUDITORIUM_CAPACITY) FROM AUDITORIUM

UPDATE AUDITORIUM SET AUDITORIUM_CAPACITY = 110
	WHERE AUDITORIUM_NAME = '236-1';

SELECT * FROM TR_AUDIT

--  TASK 8
DROP TRIGGER TASK_8;

CREATE TRIGGER TASK_8
	ON FACULTY INSTEAD OF DELETE
		AS RAISERROR('ERROR DELETE',10,1);
	RETURN

DELETE FACULTY WHERE FACULTY.FACULTY = 'TEST';

SELECT * FROM FACULTY;


--	TASK 9 

DROP TRIGGER TASK_9;

CREATE TRIGGER TASK_9
	ON DATABASE 
		FOR DDL_DATABASE_LEVEL_EVENTS AS
	DECLARE @TYPE VARCHAR(50) = 
		EVENTDATA().value('(/EVENT_INSTANCE/EventType)[1]', 'VARCHAR(50)');
	DECLARE @O_NAME VARCHAR(50) = 
		EVENTDATA().value('(/EVENT_INSTANCE/ObjectName)[1]', 'VARCHAR(50)');
	DECLARE @O_TYPE VARCHAR(50) = 
		EVENTDATA().value('(/EVENT_INSTANCE/ObjectType)[1]', 'VARCHAR(50)');
	PRINT 'TYPE EVENT   ' + @TYPE;
	PRINT 'NAME OBJECT  ' + @O_NAME;
	PRINT 'TYPE_OBJECT  ' + @O_TYPE;
	RAISERROR('OPERATION WITH DB CANCEL',16,1);
	ROLLBACK;

DROP TABLE TASK_6
CREATE TABLE TEST(I INT)


----11

